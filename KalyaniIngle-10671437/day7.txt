...............................................//Task1(Max Marks)
.........app.component.html

<div class="container" style="border:1px solid lightblue;border-radius:10px;padding:20px;">
  <h1 class="container">Student Information</h1>
  
  <form class="form" autoComplete="off" (ngSubmit)="getResult()">
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" class="form-control" id="name" placeholder="Enter username" name="name" [(ngModel)]="n" required>
    </div>
    <div class="form-inline">

    <label class="mr-sm-2">Marks(each out of 50):</label>
    <label class="mr-sm-2" for="m">Maths:</label>
    <input class="form-control mb-2 mr-sm-2"  name="m" [(ngModel)]=m1 >
    <label class="mr-sm-2" for="e">English:</label>
    <input class="form-control mb-2 mr-sm-2"  name="e" [(ngModel)]=e1 >
    <label class="mr-sm-2" for="s">Science:</label>
    <input class="form-control mb-2 mr-sm-2"  name="s" [(ngModel)]=s1 >
   
    </div>
    <label class="mr-sm-2">Results:</label><br>
    <div class="form-inline">

    
    <label class="mr-sm-2" for="ma">Total Marks:</label>
    <input class="form-control mb-2 mr-sm-2"  name="ma" placeholder="Total Marks"[(ngModel)]=tm value={{tm}} readonly>
    <label class="mr-sm-2" for="pm">Marks in %:</label>
    <input class="form-control mb-2 mr-sm-2"  name="pm" placeholder="Marks" [(ngModel)]=pm value={{pm}} readonly>
    <label class="mr-sm-2" for="mm">Maximum Marks:</label>
    <input class="form-control mb-2 mr-sm-2"  name="mm" placeholder="Marks" [(ngModel)]=mm value={{mm}} readonly>
   
    </div>
    <div class="form-group">
       <button class="btn btn-primary" type="submit" >Get Result</button>
       </div>
  </form>
</div>
..................//app.component.ts
export class AppComponent {
  title = 'TestPro1';
 m1:number;
 e1:number;
 s1:number;
 tm:number;
 pm:number;
 mm:number;
 constructor()
 {
  }
  getResult()
  {
    this.tm=Number(this.m1)+Number(this.e1)+Number(this.s1);
    this.pm=Number(((this.tm)/150)*100);
    this.pm=Number(this.pm.toFixed(2));
    if(this.m1>=this.e1 && this.m1>=this.s1)
    {
      this.mm=this.m1;
    }
    else if(this.e1>=this.m1 && this.e1>=this.s1)
    {
      this.mm=this.e1;
    }
    else{
      this.mm=this.s1
    }
   
  }
}
...................................................Task2(Person details)
.............app.component.ts
export class AppComponent {
  title = 'TestPro2';
  person:any[]=[
    {
      name:"Kalyani",
      age:22
    },
    {
      name:"Prajakta",
      age:34
    }
    ,
    {
      name:"Amit",
      age:50
    }
  ];
 
  constructor()
  {
  }
}
..............app.component.html
<div class="container">
<h1>Person details</h1>
<ul *ngFor="let person of person">
   <li *ngIf="person.age<35">
   {{person.name}}   {{person.age}}
   </li>
</ul>
</div>
......................................................Task3(Product List)
............app.component.ts
 prod:any[]=[
    {
          id:"1",
          name:"Basketball",
          image:"../assets/images/bb.jpg"
    },
    {
          id:"2",
          name:"Samsung galaxy M31s",
          image:"../assets/images/s.jpg"
    },
    {
          id:"3",
          name:"Dell Laptop",
          image:"../assets/images/dell.jpg"
    }
  ]
..........................app.component.html
<div class="container">
  <h2>Product Details</h2>                                                                                    
  
  <div class="table-responsive">
    <table class="table table-bordered">
      <thead class="thead-dark">
        <tr>
          <th>Product Id</th>
          <th>Product Name</th>
          <th>Product Image</th>
        </tr>
      </thead>
      <tbody *ngFor="let prod of prod">
        <tr>
          <td>{{prod.id}}</td>
          <td>{{prod.name}}</td>
          <td><img [src]='prod.image'></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
............................................................Task4(Event Binding (click))
...............app.component.html
<div class="container">
<button (click)="showmeAlert()" class="btn btn-info">Click me!</button>
</div>
................app.component.ts
showmeAlert()
  {
    alert("Hello My name is Kalyani!!!");
  }
.............................................................Task5(Form Validation)
...............app.component.html
<div class="container">
  <h2>User Details</h2>
<form #f="ngForm" novalidate (ngSubmit)="save(f.value,f.valid)" class="form" autoComplete="off">
<div class="form-group">
<label class="mr-sm-2" for="name">Name</label>
<input class="form-control" type="text" name="name" [(ngModel)]="user.name" #name="ngModel" required minlength="5">
<small [hidden]="name.valid ||(name.pristine && !f.submitted)" class="form-group text-danger">
Name is required (min 5 characters)
</small>
</div>
<div ngModelGroup="address" class="form-group">
<div class="form-group">
<label class="mr-sm-2" for="street">Street</label>
<input  class="form-control" type="text" name="street" [(ngModel)]="user.address.street" #street="ngModel" required>
<small [hidden]="street.valid ||(street.pristine && !f.submitted)" class="text-danger">
Street is required
</small>
</div>
<div class="form-group">
<label class="mr-sm-2" for="postcode">Postcode</label>
<input class="form-control" type="text" name="postcode" [(ngModel)]="user.address.postcode">

</div>
</div>
<button type="submit">Submit</button>
</form>
<!--The ngModelGroup directive allows you to group together related inputs so that you structure the object represented by the form in a useful and predictavle way.
ngModelGroup is often used in combination with fieldset  as they mostly represent the same idea of "grouping together inputs"-->

......................app.component.ts

save(model:User,isValid:boolean)
  {
    //check if model is valid
    //if valid call API to save customer
    console.log(model,isValid);
  }




